<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 迷失岁月</title>
    <link>https://johnson9009.github.io/post/</link>
    <description>Recent content in Posts on 迷失岁月</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Oct 2017 20:10:52 +0800</lastBuildDate>
    
	<atom:link href="https://johnson9009.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2017 10 23 New Post</title>
      <link>https://johnson9009.github.io/post/new-post/</link>
      <pubDate>Mon, 23 Oct 2017 20:10:52 +0800</pubDate>
      
      <guid>https://johnson9009.github.io/post/new-post/</guid>
      <description>&lt;h1 id=&#34;instruction-of-create-a-new-post&#34;&gt;Instruction of Create a New Post&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Enter the root directory of our site.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the post.&lt;/p&gt;

&lt;p&gt;Below command will generate a new post whose type is set to &lt;code&gt;post&lt;/code&gt; automatically. So we can see it on Archives page, the directory name must be &lt;code&gt;post&lt;/code&gt;. The title of this post will be set to &lt;code&gt;post name&lt;/code&gt; automatically and the slug of this post will be &lt;code&gt;post-name&lt;/code&gt;, maybe we need change the slug with front matter of this post. The slug should be a string which is a lower case version of title name and replace all white space with &lt;code&gt;-&lt;/code&gt; and replace any special character with its corresponding English word. For example, the slug of post &lt;code&gt;test#test.md&lt;/code&gt; should be &lt;code&gt;test-sharp-test&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hugo new post/post-name.md
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test Travis CI.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Definition of container_of Macro</title>
      <link>https://johnson9009.github.io/post/linux-definition-of-container_of-macro/</link>
      <pubDate>Sun, 11 Sep 2016 02:28:05 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/linux-definition-of-container_of-macro/</guid>
      <description>&lt;p align=&#34;right&#34;&gt;
  &lt;font color=&#34;#ff0000&#34;&gt;&lt;strong&gt;Reproduce from&lt;/strong&gt; &lt;a href=&#34;http://stackoverflow.com/questions/6083734/rationale-behind-the-container-of-macro-in-linux-list-h&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;http://stackoverflow.com/questions/6083734/rationale-behind-the-container-of-macro-in-linux-list-h&lt;/strong&gt;&lt;/a&gt;&lt;/font&gt;
&lt;/p&gt;

&lt;h4 id=&#34;question&#34;&gt;Question&lt;/h4&gt;

&lt;p&gt;In the implementation of linux kernel lists in &lt;code&gt;/include/linux/list.h&lt;/code&gt;, what is the rationale behind the first line (pasted below) of the &lt;code&gt;container_of&lt;/code&gt; macro?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;const typeof( ((type *)0)-&amp;gt;member ) *__mptr = (ptr);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a sample code of mine, I removed this line and changed the definition to&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#define container_of(ptr, type, member) ({\&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160;&amp;#160; (type *)( (char *)ptr &amp;#8211; offsetof(type,member) );})&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and my code still showed expected results. Is the first line redundant then? Or does it have some hidden trap that I am not aware of?&lt;/p&gt;

&lt;p&gt;The code I found at &lt;a href=&#34;http://kernelnewbies.org/FAQ/LinkedLists&#34; target=&#34;_blank&#34;&gt;Faq/LinkedLists&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/**&lt;br /&gt;
* container_of &amp;#8211; cast a member of a structure out to the containing structure&lt;br /&gt;
* @ptr:&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; the pointer to the member.&lt;br /&gt;
* @type:&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; the type of the container struct this is embedded in.&lt;br /&gt;
* @member:&amp;#160;&amp;#160;&amp;#160;&amp;#160; the name of the member within the struct.&lt;br /&gt;
*&lt;br /&gt;
*/&lt;br /&gt;
#define container_of(ptr, type, member) ({\&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; const typeof( ((type *)0)-&amp;gt;member ) *&lt;strong&gt;mptr = (ptr);\&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; (type *)( (char *)&lt;/strong&gt;mptr &amp;#8211; offsetof(type,member) );})&lt;/p&gt;

&lt;p&gt;#define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How debuggers work: Part 3 – Debugging information</title>
      <link>https://johnson9009.github.io/post/how-debuggers-work-part-3-debugging-information/</link>
      <pubDate>Fri, 05 Aug 2016 08:04:48 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/how-debuggers-work-part-3-debugging-information/</guid>
      <description>&lt;p align=&#34;right&#34;&gt;
  &lt;font color=&#34;#ff0000&#34;&gt;&lt;strong&gt;Reproduce from&lt;/strong&gt;&lt;/font&gt; &lt;a title=&#34;http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information&#34; href=&#34;http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information&#34;&gt;&lt;strong&gt;http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;This is the third part in a series of articles on how debuggers work. Make sure you read &lt;a href=&#34;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1/&#34;&gt;the first&lt;/a&gt; and &lt;a href=&#34;http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints/&#34;&gt;the second&lt;/a&gt; parts before this one.&lt;/p&gt;

&lt;h5 id=&#34;in-this-part&#34;&gt;In this part&lt;/h5&gt;

&lt;p&gt;I&amp;#8217;m going to explain how the debugger figures out where to find the C functions and variables in the machine code it wades through, and the data it uses to map between C source code lines and machine language words.&lt;/p&gt;

&lt;h5 id=&#34;debugging-information&#34;&gt;Debugging information&lt;/h5&gt;

&lt;p&gt;Modern compilers do a pretty good job converting your high-level code, with its nicely indented and nested control structures and arbitrarily typed variables into a big pile of bits called machine code, the sole purpose of which is to run as fast as possible on the target CPU. Most lines of C get converted into several machine code instructions. Variables are shoved all over the place &amp;#8211; into the stack, into registers, or completely optimized away. Structures and objects don&amp;#8217;t even &lt;em&gt;exist&lt;/em&gt; in the resulting code &amp;#8211; they&amp;#8217;re merely an abstraction that gets translated to hard-coded offsets into memory buffers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How debuggers work: Part 2 – Breakpoints</title>
      <link>https://johnson9009.github.io/post/how-debuggers-work-part-2-breakpoints/</link>
      <pubDate>Fri, 05 Aug 2016 07:54:45 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/how-debuggers-work-part-2-breakpoints/</guid>
      <description>&lt;p align=&#34;right&#34;&gt;
  &lt;font color=&#34;#ff0000&#34;&gt;&lt;strong&gt;Reproduce from&lt;/strong&gt; &lt;a title=&#34;http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints&#34; href=&#34;http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints&#34;&gt;&lt;strong&gt;http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints&lt;/strong&gt;&lt;/a&gt;&lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;This is the second part in a series of articles on how debuggers work. Make sure you read &lt;a href=&#34;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1/&#34;&gt;the first part&lt;/a&gt; before this one.&lt;/p&gt;

&lt;h5 id=&#34;in-this-part&#34;&gt;In this part&lt;/h5&gt;

&lt;p&gt;I&amp;#8217;m going to demonstrate how breakpoints are implemented in a debugger. Breakpoints are one of the two main pillars of debugging &amp;#8211; the other being able to inspect values in the debugged process&amp;#8217;s memory. We&amp;#8217;ve already seen a preview of the other pillar in part 1 of the series, but breakpoints still remain mysterious. By the end of this article, they won&amp;#8217;t be.&lt;/p&gt;

&lt;h5 id=&#34;software-interrupts&#34;&gt;Software interrupts&lt;/h5&gt;

&lt;p&gt;To implement breakpoints on the x86 architecture, software interrupts (also known as &amp;ldquo;traps&amp;rdquo;) are used. Before we get deep into the details, I want to explain the concept of interrupts and traps in general.&lt;/p&gt;

&lt;p&gt;A CPU has a single stream of execution, working through instructions one by one &lt;a href=&#34;http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints#id7&#34;&gt;&lt;a href=&#34;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1/&#34;&gt;1&lt;/a&gt;&lt;/a&gt;. To handle asynchronous events like IO and hardware timers, CPUs use interrupts. A hardware interrupt is usually a dedicated electrical signal to which a special &amp;ldquo;response circuitry&amp;rdquo; is attached. This circuitry notices an activation of the interrupt and makes the CPU stop its current execution, save its state, and jump to a predefined address where a handler routine for the interrupt is located. When the handler finishes its work, the CPU resumes execution from where it stopped.&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;p&gt;Software interrupts are similar in principle but a bit different in practice. CPUs support special instructions that allow the software to simulate an interrupt. When such an instruction is executed, the CPU treats it like an interrupt &amp;#8211; stops its normal flow of execution, saves its state and jumps to a handler routine. Such &amp;ldquo;traps&amp;rdquo; allow many of the wonders of modern OSes (task scheduling, virtual memory, memory protection, debugging) to be implemented efficiently.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How debuggers work: Part 1 – Basics</title>
      <link>https://johnson9009.github.io/post/how-debuggers-work-part-1-basics/</link>
      <pubDate>Fri, 05 Aug 2016 07:07:40 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/how-debuggers-work-part-1-basics/</guid>
      <description>&lt;p align=&#34;right&#34;&gt;
  &lt;font color=&#34;#ff0000&#34;&gt;&lt;strong&gt;Reproduce from&lt;/strong&gt;&lt;/font&gt; &lt;a title=&#34;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1&#34; href=&#34;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;This is the first part in &lt;a href=&#34;http://eli.thegreenplace.net/pages/code&#34;&gt;a series of articles&lt;/a&gt; on how debuggers work. I&amp;#8217;m still not sure how many articles the series will contain and what topics it will cover, but I&amp;#8217;m going to start with the basics.&lt;/p&gt;

&lt;h5 id=&#34;in-this-part&#34;&gt;In this part&lt;/h5&gt;

&lt;p&gt;I&amp;#8217;m going to present the main building block of a debugger&amp;#8217;s implementation on Linux &amp;#8211; the &lt;tt&gt;ptrace&lt;/tt&gt; system call. All the code in this article is developed on a 32-bit Ubuntu machine. Note that the code is very much platform specific, although porting it to other platforms shouldn&amp;#8217;t be too difficult.&lt;/p&gt;

&lt;h5 id=&#34;motivation&#34;&gt;Motivation&lt;/h5&gt;

&lt;p&gt;To understand where we&amp;#8217;re going, try to imagine what it takes for a debugger to do its work. A debugger can start some process and debug it, or attach itself to an existing process. It can single-step through the code, set breakpoints and run to them, examine variable values and stack traces. Many debuggers have advanced features such as executing expressions and calling functions in the debbugged process&amp;#8217;s address space, and even changing the process&amp;#8217;s code on-the-fly and watching the effects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calling Convention “stdcall” VS “cdecl”</title>
      <link>https://johnson9009.github.io/post/calling-convention-stdcall-vs-cdecl/</link>
      <pubDate>Sun, 31 Jul 2016 15:09:40 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/calling-convention-stdcall-vs-cdecl/</guid>
      <description>&lt;p&gt;We know calling convention of all Windows API is stdcall, and the default calling convention of C/C++ is cdecl, but why, why Windows choose the stdcall as API’s calling convention? What&amp;#8217;s the benefit of it?&lt;/p&gt;

&lt;p&gt;I found below answer from internet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It was historically added. On x86 &amp;#8211; stdcall is hardly cheaper, than cdecl:&lt;br /&gt;
stdcall: in function &amp;#8211; ret N (2 bytes)&lt;br /&gt;
cdecl: in function &amp;#8211; ret (1 byte) + everywhere where this function is caused &amp;#8211; add sp, N (3 bytes).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before today, I just know the different of stdcall and cdecl, but has never think about the question &amp;ldquo;What&amp;#8217;s the benefit of stdcall?&amp;ldquo;. There are many different calling conventions, consider the method of passing parameters, some calling convention do it through stack such as stdcall and cdecl when some others do it using registers such as fastcall, consider the responsibility for cleaning the arguments from the stack, in stdcall the callee should do that when in cdecl it is caller.&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;p&gt;I get a example from textbook.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Construct Your Projects Using CMake</title>
      <link>https://johnson9009.github.io/post/construct-your-projects-using-cmake/</link>
      <pubDate>Tue, 26 Jul 2016 15:28:04 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/construct-your-projects-using-cmake/</guid>
      <description>&lt;p&gt;Firstly, I will say thanks to my colleague Jiangli, your suggestion give me more power to practise my English writing. This is my first English post, I will persist in practising my English by this way even though it is hard to me.&lt;/p&gt;

&lt;p&gt;These days, I reorganize my little project using CMake, CMake is cross-platform free and open-source software for managing the build process of software using a compiler-independent method, it is used in conjunction with native build environments such as make, Apple&amp;#8217;s Xcode and Microsoft Visual Studio. It is a good construct tool which can generate configuration file of native build environments such as Makefile, project files automatically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序开发与构建</title>
      <link>https://johnson9009.github.io/post/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%B8%8E%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Sun, 10 Jul 2016 14:31:32 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%B8%8E%E6%9E%84%E5%BB%BA/</guid>
      <description>&lt;p&gt;对于程序员，开发必然不用多说，但我们常常对构建这一概念了解较少，当下的集成开发环境为我们提供了友好的用户界面，直观的操作方式掩盖了构建相关的许多概念。Linux 开发者大部分都比较熟悉构建，因为常常需要使用 make 这样的构建工具来帮助自己简化编译，链接，安装等过程。&lt;/p&gt;

&lt;p&gt;此文主要以 CMake 来介绍与之相关的一系列概念及相关工具，让我们先来以一个小例子说明一下 CMake，make，gcc 之间的关系及各自的由来。场景是这样的：程序员要开发一个 calculate 程序，所以它设计了一个 main.c，一个计算加减乘除等运算的 math.c 及 math.h。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最开始程序员只使用 gcc 这一个工具，每次修改完文件后，都是先将 main.c 编译为 main.o，再将 math.c 编译为 math.o，最后再将 main.o 和 math.o 链接在一起生成 calculate。&lt;/li&gt;
&lt;li&gt;随着开发的进行，频繁的进行上述步骤，已经让程序员忍无可忍，浪费时间又学不到什么，所以他就使用了 make 工具，make 工具可以说是程序员请来的一个助手，程序员现在只需要在配置文件中描述出，用于编译链接的工具是 gcc，main.o 是由 main.c 编译来的，math.o 是由 math.o 编译来的，calculate 程序是由 main.o 和 math.o 链接得到的，即可。每次修改完文件后，只需要执行一下 make，calculate 就生成出来了。&lt;/li&gt;
&lt;li&gt;随着需求的不断增加，文件也变得越来越多，make 的配置文件越来越难维护，所以程序员开始使用了 CMake 工具，CMake 不是一个 make 工具的替代品，应该说是 make 工具跟上层的一个工具，它会自动生成出来 make 工具所需要的配置文件，之后程序员就可以使用 make 构建程序了。现在程序员不用自己写 make 工具的配置文件了，他只需要写一个 CMake 的配置文件，这个就简单多了，他只需描述出，calculate 程序是由 main.c，math.c，。。。等生成的即可，非常直观简洁。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;p&gt;构建这个过程在之前接触的少一些，之前的开发大都是直接在集成开发环境中编辑，编译，调试，测试，没有正规的持续集成测试，自动化测试之类的，所以也就没有这个需求，如果想进行自动化测试，持续集成等这样的事情就必须让构建能够自动化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cygwin, MinGW, MSYS, GnuWin32, GNU Utilities for Win32 and now MinGW-w64</title>
      <link>https://johnson9009.github.io/post/cygwin-mingw-msys-gnuwin32-gnu-utilities-for-win32-and-now-mingw-w64/</link>
      <pubDate>Thu, 07 Jul 2016 08:38:41 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/cygwin-mingw-msys-gnuwin32-gnu-utilities-for-win32-and-now-mingw-w64/</guid>
      <description>&lt;p align=&#34;right&#34;&gt;
  &lt;font color=&#34;#ff0000&#34;&gt;&lt;strong&gt;Reproduce from&lt;/strong&gt; &lt;a href=&#34;http://poquitopicante.blogspot.com/2012/08/cygwin-mingw-msys-gnuwin32-gnu.html&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;http://poquitopicante.blogspot.com/2012/08/cygwin-mingw-msys-gnuwin32-gnu.html&lt;/strong&gt;&lt;/a&gt;&lt;/font&gt;
&lt;/p&gt;

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;GNU on Windows has a sordid past. Not really, but sordid sounds so much more interesting than complicated. So here&amp;#8217;s how I understand it, without any emotion, this is really just a navigational exercise.&lt;/p&gt;

&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h4&gt;

&lt;p&gt;What was just said and what I am about to say is entirely opinion and not based on fact. I hope that I do not offend anyone, but I am sure that I inevitably will, as much of my opinion is based on hearsay. In that case I apologize, and please remember that the purpose of this blog is purely selfish; it is a note to myself to remind me of what took me so long to finally understand. So instead of getting angry with me, perhaps post a comment and disabuse me of my still as yet incomplete knowledge.&lt;/p&gt;

&lt;h4 id=&#34;cygwin&#34;&gt;Cygwin&lt;/h4&gt;

&lt;p&gt;In the beginning there was &lt;a href=&#34;http://cygwin.com/&#34;&gt;Cygwin&lt;/a&gt;. Their tagline is &amp;ldquo;Get that Linux feeling &amp;#8211; on Windows!&amp;rdquo; This does a lot to explain exactly what Cygwin is, Linux emulated on Windows. What this means in practice is that Cygwin applications use the cygwin.dll, a common runtime that must be linked to any applications that run on Cygwin, and consequently any applicaton compiled with Cygwin gcc. So essentially, when you use Cygwin you are more or less stuck in Cygwin. True, you could distribute the cygwin.dll with your application, so it would appear to be &lt;em&gt;native&lt;/em&gt;, but it wouldn&amp;#8217;t be truly native. By native here I mean that it runs on one of the windows runtimes like the &lt;a href=&#34;http://en.wikipedia.org/wiki/Microsoft_Windows_library_files&#34;&gt;win32api or msvcrt&lt;/a&gt;. The &lt;a href=&#34;http://www.nano-editor.org/download.php&#34;&gt;Windows binary of GNU nano&lt;/a&gt; is an example of an application compiled using Cygwin that requires cygwin.dll to run. The probable downside of using this layer between the Windows API and your application may be potentially slower speed and some limits in its features.&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;h4 id=&#34;mingw&#34;&gt;MinGW&lt;/h4&gt;

&lt;p&gt;From Cygwin was born &lt;a href=&#34;http://www.mingw.org/&#34;&gt;MinGW&lt;/a&gt;. I don&amp;#8217;t know if this is actually true, but that is what I&amp;#8217;ve heard. Either way it doesn&amp;#8217;t really matter. The essential thing to realize here is this.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>带Code Review的优秀Git开发架构</title>
      <link>https://johnson9009.github.io/post/%E5%B8%A6code-review%E7%9A%84%E4%BC%98%E7%A7%80git%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 04 Jul 2016 11:57:06 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%B8%A6code-review%E7%9A%84%E4%BC%98%E7%A7%80git%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;大部分公司虽然都用 Git 等版本管理系统管理开发过程，但这并不代表就能达到高效可靠的开发效率和质量，开发人员的水平是层次不齐的，除了加大在招聘方面的投入外，code review 是提高代码质量的一大法器。&lt;/p&gt;

&lt;p&gt;错误且糟糕的开发架构特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有 branch 模型，大家的 commit 都提交在很随意创建的 branch，时间一长就变成一大堆branch，而且谁都知道大部分 branch 都是没用的，但谁也没有十足把握说能把它们删掉。&lt;/li&gt;
&lt;li&gt;没有 coding style，代码千奇百怪，还谁也说服不了谁。&lt;/li&gt;
&lt;li&gt;严重两级分化，忙的忙死，闲的闲死，最后经常忙的人中能力强的人跳槽走掉，闲的却依然那么闲，好像走了的那个人原来都是在瞎忙一样（很神奇的现象）。&lt;/li&gt;
&lt;li&gt;Code review 反复被提起，又反复被遗忘，通常采用同步方式进行即开会，效率不高，而且大部分最后演变成给不懂的人反复无聊的讲解，或讨论其他问题完全忘记了主题。&lt;/li&gt;
&lt;li&gt;新人不知道该怎么进行每天的工作，稀里糊涂就把 code 提交上去了（其实老人也一样），极其恶心的低级 bug 被隐藏到集成测试时发现，把那些能力强的人气的半死。&lt;/li&gt;
&lt;li&gt;没有规范成型的单元测试，你的代码今天能跑，明天也许就被别人给搞的不能跑了，直到你下次做这部分功能时才发现，然后 debug，然后奔溃的心里。费了九牛二虎的力气重构了极其可怕的烂代码后，发现程序跑不起来，造成人人都不会去想重构这个事儿，都是插来插去的添加新逻辑，最后造成更烂的代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天总结的开发架构由几部分组成：成熟优秀的 branch 模型 + Branch 模型的保护 + Phabricator 结合 Git 实现的 Pre-Push 高效 Code Review + 普通开发人员开发流程 + Unit Test + Coding Style + 自动化构建及持续集成。本文所讲架构不适用于开发者分散在全球各地互不相识的开源项目，这样的项目更适合用 GitHub 的 Pull-Request 的那套架构，本文适用于开发人员经常在一起的公司项目的开发。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中对象的初始化</title>
      <link>https://johnson9009.github.io/post/c&#43;&#43;%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Sat, 02 Jul 2016 00:50:00 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/c&#43;&#43;%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>Most Vexing Parse问题 int a_int_object(5); 这样定义一个int对象对么？ int b_int_object(); 我只想让b_int_object使用默认构造函数进行初始化即可，这样行么？ 若Tool是</description>
    </item>
    
    <item>
      <title>Git各概念深入学习</title>
      <link>https://johnson9009.github.io/post/git%E5%90%84%E6%A6%82%E5%BF%B5%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 01 Jul 2016 03:32:16 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/git%E5%90%84%E6%A6%82%E5%BF%B5%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;平时用TortoiseGit多了，只会用Git来做做简单的版本控制管理，其实这样管理后的项目基本就是野路子，当当地痞还行，上不了战场。最近比较有兴趣，网上的资料结合着命令行Git的练习，对很多概念有了清晰的认识，也找到了一套成熟的，高效，能发挥Git真正实力的用法。&lt;/p&gt;

&lt;p&gt;最常用命令：&lt;/p&gt;

&lt;table cellspacing=&#34;0&#34; cellpadding=&#34;2&#34; width=&#34;590&#34; border=&#34;0&#34;&gt;
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git clone
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      从远程仓库拉代码到本地，其实内部主要是将整个git内部资料拉下来。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git checkout
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      表面上:主要是切换branch，加 –b 指如果当前没有此branch那么先创建它。 &lt;br /&gt;实质上:从某个区域取出某些文件，所以它也可以用于取以前版本的文件。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git status
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      查看当前代码的状态，如果修改了代码就会出现让你add到stage区的提示。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git add
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      添加一个修改到stage区，这之后才能commit。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git commit
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      将stage区的修改提交到当前branch的HEAD区。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git log
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      看commit信息的history
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git fetch
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      将远程仓库的最新代码拉下来但不自动与本地代码merge。将远程仓库的代码看作是另一个branch（只是也叫当前branch的名字），更容易理解fetch和pull的区别。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git pull
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      将远程仓库的最新代码拉下来并merge到当前分支上，当前分支是主动者。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git merge
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      将目标branch merge到当前branch上。
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td valign=&#34;top&#34; width=&#34;80&#34;&gt;
      git push
    &lt;/td&gt;
    
    &lt;td valign=&#34;top&#34; width=&#34;508&#34;&gt;
      将本地代码推到远程仓库上去。
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>腊月二十七（-10~0℃）PM2.5: 28</title>
      <link>https://johnson9009.github.io/post/%E8%85%8A%E6%9C%88%E4%BA%8C%E5%8D%81%E4%B8%83-10-0%E5%BA%A6pm2.5-28/</link>
      <pubDate>Thu, 04 Feb 2016 18:39:12 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E8%85%8A%E6%9C%88%E4%BA%8C%E5%8D%81%E4%B8%83-10-0%E5%BA%A6pm2.5-28/</guid>
      <description>现在火车走到了怀来，车上出乎意料的热，大家都穿着大棉服上车，现在热的都很难受，小孩子热的难受就哭闹，他爸爸手足无措的哄着，希望他快点再睡着。</description>
    </item>
    
    <item>
      <title>十二月十二（-9~-2℃）PM2.5: 181</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%BA%8C-9--2%E5%BA%A6pm2.5-181/</link>
      <pubDate>Thu, 21 Jan 2016 15:53:19 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E4%BA%8C%E6%9C%88%E5%8D%81%E4%BA%8C-9--2%E5%BA%A6pm2.5-181/</guid>
      <description>困得眼睛都睁不开了，今天开年会，可是我竟然忘了戴我2000多买的专门用来装逼的变色眼镜，唉~真是可惜，下午讲了半天的鸡汤演讲，都是扯淡，说的</description>
    </item>
    
    <item>
      <title>十二月初一（-10~2℃）PM2.5: 85</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E4%BA%8C%E6%9C%88%E5%88%9D%E4%B8%80-10-2%E5%BA%A6pm2.5-85/</link>
      <pubDate>Sun, 10 Jan 2016 14:40:15 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E4%BA%8C%E6%9C%88%E5%88%9D%E4%B8%80-10-2%E5%BA%A6pm2.5-85/</guid>
      <description>&lt;p&gt;好长时间没写日记了，干啥去了呢？懒去了，时间大多都消耗在了碎片化的各种信息上（微信、微博、知乎&amp;#8230;）。有用么？没大用，看到的东西永远是片段式的，不成系统，没有章法，吸引眼球是真的，提升个人水平、自身能力的话，还是需要更高质量的知识成果如书籍、论文、代码、高质量的有效交流。&lt;/p&gt;

&lt;p&gt;元旦去了哥哥家，看我最最可爱的小侄女去了，她真的好可爱、好呆萌、好&amp;#8230;.，胖胖的小手可让人疼了，抱着她是一种说不出来的幸福。我有时在想是不是因为我亲她，所以我觉得她长得比别的小孩子可爱，每当此时就有一个声音出现：“人家长得本身就可爱好吧？！”&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://johnson9009.github.io/image/1.jpg&#34;&gt;&lt;img style=&#34;background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;&#34; title=&#34;80222740380167065&#34; src=&#34;https://johnson9009.github.io/images/1.jpg&#34; alt=&#34;80222740380167065&#34; width=&#34;310&#34; height=&#34;240&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://johnson9009.github.io/image/2.jpg&#34;&gt;&lt;img style=&#34;background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;&#34; title=&#34;318246050291475113&#34; src=&#34;https://johnson9009.github.io/images/2.jpg&#34; alt=&#34;318246050291475113&#34; width=&#34;198&#34; height=&#34;240&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://johnson9009.github.io/image/4.jpg&#34;&gt;&lt;img style=&#34;background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;&#34; title=&#34;529181305337512659&#34; src=&#34;https://johnson9009.github.io/images/4.jpg&#34; alt=&#34;529181305337512659&#34; width=&#34;172&#34; height=&#34;218&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://johnson9009.github.io/image/3.jpg&#34;&gt;&lt;img style=&#34;background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;&#34; title=&#34;340900869906370813&#34; src=&#34;https://johnson9009.github.io/images/3.jpg&#34; alt=&#34;340900869906370813&#34; width=&#34;196&#34; height=&#34;218&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://johnson9009.github.io/image/5.jpg&#34;&gt;&lt;img style=&#34;background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;&#34; title=&#34;569549551240346127&#34; src=&#34;https://johnson9009.github.io/images/5.jpg&#34; alt=&#34;569549551240346127&#34; width=&#34;226&#34; height=&#34;218&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;p&gt;过足了抱小宝贝儿的瘾后，也着实感到了养育一个孩子的辛苦，深切的体会到了“没有一定条件不敢生孩子”这就话中顾虑的正确性。当然，陪伴着辛苦的总少不了快乐和幸福，当了爸爸的哥哥，每天都幸福的像一朵花一样，哈哈哈。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>十月廿四（-3~8℃）PM2.5: 117</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%BB%BF%E5%9B%9B-3-8%E5%BA%A6pm2.5-117/</link>
      <pubDate>Sat, 05 Dec 2015 14:54:25 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%BB%BF%E5%9B%9B-3-8%E5%BA%A6pm2.5-117/</guid>
      <description>犹豫来犹豫去，最后还是克服了犯懒，去参加的大冰的畅聊会。不过说实话收获不是特别大，因为他讲的大多都已经从他的书里汲取到了，但现场听他讲以及感</description>
    </item>
    
    <item>
      <title>十月十七（-4~1℃）PM2.5: 307</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%B8%83-4-1%E5%BA%A6pm2.5-307/</link>
      <pubDate>Sat, 28 Nov 2015 16:22:01 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%B8%83-4-1%E5%BA%A6pm2.5-307/</guid>
      <description>&lt;p&gt;今天起了个大早去参加了第三届开源操作系统年度技术会议，我最感兴趣的是一个分主题，GPU与虚拟化，先是Intel的一个技术专家对这一主题进行简介并介绍Intel做的工作，后是华为的一个工程师讲华为在这方面做的相关产品，最精彩的我觉得是下午北大青年教授讲的GPU优化。&lt;/p&gt;

&lt;p&gt;研究生被导师的人品恶心到的那段时间，无心做事但又不想浪费时间，于是开始了解云计算相关的技术，经过一段时间的探索，对云计算中的各个角色及其由来都理解的特别透彻，同时我也发现了国内学术界的轻浮与虚伪，好多教授根本对云计算屁都不懂，却夸夸其谈，下面的人又是傻逼一样的随声附和。&lt;/p&gt;

&lt;p&gt;GPU虚拟化没有伴随云计算的出现而出现，是因为在起初的云计算应用场景中根本没有GPU的需求，云计算源于亚马逊做的AWS，它要解决的问题是能自动的弹性扩展网站的服务器能力，所以根本就没有什么GPU的事儿。&lt;/p&gt;

&lt;p&gt;但随着云计算的不断发展，它的概念也在逐步的丰富，尤其企业内部的私有云，人们不再局限于用它做一个可伸缩的服务器，人们期望利用它天生的很多优点做其他的事情。比如，一个企业想在机房部署一套私有云，然后员工的计算机都缩小成一个小的盒子和显示器，员工办公的时候开启电脑其实是登录到机房的私有云中的一台虚拟机中，这样所有的操作及数据都在机房，对安全及统一维护都有非常大的好处。&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;p&gt;逐渐的有一些设计公司也采用这种结构，但是问题来了，设计行业中的好多软件需要大量的GPU操作，所以好多软件在虚拟机中根本运行不起来，比如做模型的3Dmax或者maya，这才引发了GPU虚拟化的产生。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>十月十五（-8~0℃）PM2.5: 155</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%BA%94--8-0%E5%BA%A6pm2.5-155/</link>
      <pubDate>Thu, 26 Nov 2015 15:17:26 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%BA%94--8-0%E5%BA%A6pm2.5-155/</guid>
      <description>今天感冒还没有好，嘴唇又干又疼，很不爽，在北京这个地方真是不方便。以前在家里，每次病了，妈妈给弄一点药马上就好了，怀念。现在有药方想去抓点药</description>
    </item>
    
    <item>
      <title>十月十四（-8~0℃）PM2.5: 18</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E5%9B%9B-8-0%E5%BA%A6pm2.5-18/</link>
      <pubDate>Wed, 25 Nov 2015 16:54:12 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E5%9B%9B-8-0%E5%BA%A6pm2.5-18/</guid>
      <description>PM2.5竟然是18，这是北京吗？哈哈哈，话说我们内蒙的空气也就好到这个程度了。今天大家都喊着：冷！冷！冷！内蒙来的还是见过世面，不像他们一</description>
    </item>
    
    <item>
      <title>十月十二（-6~0℃）PM2.5: 30</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%BA%8C-6-0%E5%BA%A6pm2.5-30/</link>
      <pubDate>Mon, 23 Nov 2015 15:11:05 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%BA%8C-6-0%E5%BA%A6pm2.5-30/</guid>
      <description>下了好几天雪的今天，空气格外的好，不过感觉感冒了，晚上在公司愈发的感觉明显，不过好在吃了药会好些，以前在家的时候，每年我都要病一场，每次都是</description>
    </item>
    
    <item>
      <title>十月十一（-4~-1℃）PM2.5: 64</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%B8%80-4--1%E5%BA%A6pm2.5-64/</link>
      <pubDate>Sun, 22 Nov 2015 16:13:20 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%8D%81%E4%B8%80-4--1%E5%BA%A6pm2.5-64/</guid>
      <description>大雪下了一整天，中午做了三道菜给同学吃，红烧排骨，葱头白菜炒肉，蒜苔炒肉，好吃，伴着瓜子栗子胡聊了一下午，好玩。他终于找到了一份不错的工作，</description>
    </item>
    
    <item>
      <title>十月初十（-1~1℃）PM2.5: 76</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E5%8D%81-1-1%E5%BA%A6pm2.5-76/</link>
      <pubDate>Sat, 21 Nov 2015 16:11:28 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E5%8D%81-1-1%E5%BA%A6pm2.5-76/</guid>
      <description>&lt;p&gt;今天PM2.5倒是挺好，可惜天气太差了，阴暗的厉害，加上感冒，整整在家呆了一天，应该说是睡了半天，看了半天的电影，看了贾樟柯的《站台》和姜文的《鬼子来了》。&lt;/p&gt;

&lt;p&gt;《站台》这种电影在外国人的眼里也许会有不低的评价，因为那个年代的中国对他们来说是新鲜的，他们不了解中国，他们看那时的我们，犹如今天的我们看朝鲜。所以，外国人会觉得这电影好，呈现了真实的中国。但在我看来，这些真实没有那么大的意义，感觉就像南方的同学特别向往大草原，觉得内蒙古大草原多好多好，而我一个内蒙古人却没太多感觉一样。电影故事平淡无奇，就像一个流水账的文章，没什么值得品味的，唯一的用处估计就是给以后不了解2000年以前的中国的人们琢磨吧，也许那时候语文考试会出一些“钟萍的出走反映的怎么样社会现象？”之类的垃圾题目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>十月初八（0~3℃）PM2.5: 92</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E5%85%AB0-3%E5%BA%A6pm2.5-92/</link>
      <pubDate>Thu, 19 Nov 2015 16:27:30 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E5%85%AB0-3%E5%BA%A6pm2.5-92/</guid>
      <description>今天下了一天的雨，看天气预报说还得一周才能出太阳，内蒙古高原生活惯了的人真是不喜欢这种昏昏沉沉的的天气。工作调了大量的编译链接错误，现在公司</description>
    </item>
    
    <item>
      <title>C语言宏中的#和##号</title>
      <link>https://johnson9009.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E4%B8%AD%E7%9A%84sharp%E5%92%8Csharpsharp%E5%8F%B7/</link>
      <pubDate>Thu, 19 Nov 2015 13:52:27 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E4%B8%AD%E7%9A%84sharp%E5%92%8Csharpsharp%E5%8F%B7/</guid>
      <description>&lt;p&gt;&lt;strong&gt;一、一般用法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们使用#把宏参数变为一个字符串，用##把两个宏参数贴合在一起。用法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;climits&amp;gt;

using namespace std;

#define STR(s)      #s
#define CONS(a,b)   int(a##e##b)

int main() {
  printf(STR(vck));             // 输出字符串&amp;quot;vck&amp;quot;
  printf(&amp;quot;%d\n&amp;quot;, CONS(2,3));    // 2e3 输出:2000
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;语言双感叹号作用!!</title>
      <link>https://johnson9009.github.io/post/function-of-double-exclamation-mark-in-c-or-c&#43;&#43;/</link>
      <pubDate>Wed, 18 Nov 2015 16:38:32 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/function-of-double-exclamation-mark-in-c-or-c&#43;&#43;/</guid>
      <description>两个!是为了把非0值转换成1,而0值还是0。在C语言中，所以非0值都表示真。 所以!非0值 = 0，而!0 = 1。所以!!非0值 = 1，而!!0 = 0。</description>
    </item>
    
    <item>
      <title>十月初七（2~6℃）PM2.5: 120</title>
      <link>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E4%B8%832-6%E5%BA%A6pm2.5-120/</link>
      <pubDate>Wed, 18 Nov 2015 14:47:38 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%8D%81%E6%9C%88%E5%88%9D%E4%B8%832-6%E5%BA%A6pm2.5-120/</guid>
      <description>第一笔日记，希望这次能坚持的长一点，转眼研究生毕业马上就四个月了，最近的工作生活也走上了正轨，工作的太多人都不再学习，每天下了班就看看电视，</description>
    </item>
    
    <item>
      <title>UEFI开发环境的搭建</title>
      <link>https://johnson9009.github.io/post/uefi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 10 Nov 2014 09:19:43 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/uefi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;以前写教程式的记录，总觉得写的特别详细，每个步骤所需要的东西都要直接加链接，这样别人可以直接点击就可以下载到，可是后来发现这样并不是好的方式，因为网上的链接过一段时间很可能就变了，看文章的人想去下载的时候发现下载不了，所以以后都不直接加链接而是精确地指明所需要的东西，然后用户自己一搜索就可以下载到了。&lt;/p&gt;

&lt;p&gt;UEFI开发中，新手会遇到三个容易混淆的概念，EDKII、UDK2010/UDK2014和Intel提供给特定开发板的UEFI开发源码包，简单的说EDKII是UEFI标准的一个开源实现，其中包括好多个包，当然由于UEFI标准不是为了Intel一家芯片设定的，所以EDKII中会包括多种体系结构的支持。UDK2010/UDK2014可以说是一个Intel版的EDKII，其中使用了大量的EDKII的包，但只包含对Intel体系结构的支持。第三种Intel提供给特定开发板的UEFI开发源码包又可以说是UDK2010/UDK2014针对一个特定开发板的定制版本。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;系统要求：Microsoft Windows 7 SP1 Ultimate 64-bit&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《周鸿祎自述：我的互联网方法论》</title>
      <link>https://johnson9009.github.io/post/%E5%91%A8%E9%B8%BF%E7%A5%8E%E8%87%AA%E8%BF%B0%E6%88%91%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
      <pubDate>Wed, 05 Nov 2014 06:48:32 +0000</pubDate>
      
      <guid>https://johnson9009.github.io/post/%E5%91%A8%E9%B8%BF%E7%A5%8E%E8%87%AA%E8%BF%B0%E6%88%91%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E6%96%B9%E6%B3%95%E8%AE%BA/</guid>
      <description>&lt;p&gt;前两天，看到宿舍同学在看这本书，刚好那天在Kindle的商店中看到而且价格只有3块多，所以就买下了。没事儿的时候看了两眼感觉有些地方说的还是很有道理的，慢慢的就读完了。之前就看过周先生的演讲，是我喜欢的风格，直帅、大器、不受世俗的约束，从最早做杀毒卡到在方正工作再到自己创业，确实一路艰辛、不容易，值得尊敬~&lt;/p&gt;

&lt;p align=&#34;justify&#34;&gt;
  使用Kindle读书时，遇到比较好的地方就做了标记，现在整理放在这里，便于以后查阅。Kindle本身存储起来的标记很乱，所以使用clippings.io网进行了整理，这个网站可以将你Kindle里的标记、笔记什么的导出很多种形式和格式。
&lt;/p&gt;

&lt;div align=&#34;right&#34;&gt;
  
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span style=&#34;font-family: 楷体; font-size: medium;&#34;&gt;&lt;strong&gt;产品需要考虑的第一个问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>